Find the Final State (All Languages)

In the present exercise, you have a machine that changes its state after every action. Action has three components:
    INITIAL STATE: This is the state at the initial moment of the machine
    EVENT: This is the type of event that will happen
    NEW STATE: This is the state after the action happens

Here you have the list of actions in the format: INITIAL STATE: EVENT -> NEW STATE)

CLOSED: APP_PASSIVE_OPEN -> LISTEN
CLOSED: APP_ACTIVE_OPEN -> SYN_SENT
LISTEN: RCV_SYN -> SYN_RCVD
LISTEN: APP_SEND -> SYN_SENT
LISTEN: APP_CLOSE -> CLOSED
SYN RCVD: APP_CLOSE -> FIN_WAIT_1
SYN RCVD: RCV_ACK -> ESTABLISHED
SYN_SENT: RCV_SYN -> SYN_RCVD
SYN SENT: RCV_SYN_ACK -> ESTABLISHED
SYN SENT: APP_CLOSE -> CLOSED
ESTABLISHED: APP_CLOSE -> FIN_WAIT_1
ESTABLISHED: RCV_FIN -> CLOSE_WAIT
FIN_WAIT_1: RCV_FIN -> CLOSING
FIN_WAIT_1: RCV_FIN_ACK -> TIME_WAIT
FIN_WAIT_1: RCV_ACK -> FIN_WAIT_2
CLOSING: RCV_ACK -> TIME_WAIT
FIN_WAIT_2: RCV_FIN -> TIME_WAIT
TIME_WAIT: APP_TIMEOUT -> CLOSED
CLOSE_WAIT: APP_CLOSE -> LAST_ACK
LAST_ACK: RCV_ACK -> CLOSED

If an event is not applicable to the current state, your code will return 'ERROR'.

Now, the input will be an array of events. The solution function you will implement should return the final state as a string, all caps, as in the next examples:
Input                                                                       Output
["APP_PASSIVE OPEN", "APP SEND", "RCV_SYN_ACK"]                             "ESTABLISHED"
["APP_ACTIVE_OPEN"]                                                         "SYN_SENT"
["APP_ACTIVE_OPEN", "RCV_SYN_ACK", "APP_CLOSE", "RCV_FIN ACK", "RCV_ACK]    "ERROR"

